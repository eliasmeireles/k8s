apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: development
data:
  nginx.conf: |
    events {}

    http {
        log_format custom '$remote_addr - $remote_user [$time_local] "$request" '
                          'path=$request_uri '
                          'status=$status '
                          'body_bytes_sent=$body_bytes_sent '
                          '"$http_referer" '
                          '"$http_user_agent" '
                          '"$http_x_forwarded_for"';
        access_log /var/log/nginx/access.log custom;

        server {
            listen 80;

            # Redirect all requests to file-server with a fixed version
            location / {
                # Capture the entire request URI after the first slash
                rewrite ^/(.*)$ /api/file-server/v1/$1 break;

                # Proxy to the file-server service
                proxy_pass http://file-server:8080;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Original-URI $request_uri;
            }
        }
    }


---

# Deployment for the proxy
apiVersion: apps/v1
kind: Deployment
metadata:
  name: proxy-service
  namespace: development
  labels:
    app: proxy-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: proxy-service
  template:
    metadata:
      labels:
        app: proxy-service
    spec:
      containers:
        - name: nginx
          image: nginx:latest
          ports:
            - containerPort: 80
          volumeMounts:
            - mountPath: /etc/nginx/nginx.conf
              subPath: nginx.conf
              name: nginx-config
            - mountPath: /var/log/nginx
              name: nginx-logs
              readOnly: false
      volumes:
        - name: nginx-config
          configMap:
            name: nginx-config
        - name: nginx-logs
          emptyDir: { }

---

# NodePort Service for the proxy
apiVersion: v1
kind: Service
metadata:
  name: proxy-service
  namespace: development
spec:
  type: NodePort
  ports:
    - port: 80          # External port
      targetPort: 80     # Port in the container
      nodePort: 30080    # Fixed NodePort for external access
  selector:
    app: proxy-service

---

# Ingress for hostname-based routing
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: proxy-ingress
  namespace: development
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  ingressClassName: nginx
  rules:
    - host: k8s.learning.local
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: proxy-service
                port:
                  number: 80

