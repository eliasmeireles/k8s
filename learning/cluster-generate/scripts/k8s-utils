#!/bin/bash

set -e

source ./scripts/log-utils

# Default values
DEFAULT_MASTER_MEM=2G
DEFAULT_MASTER_CPUS=2
DEFAULT_MASTER_DISK=22G
DEFAULT_WORKER_MEM=4G
DEFAULT_WORKER_CPUS=2
DEFAULT_WORKER_DISK=32G
DEFAULT_HAPROXY_DISK=24G
DEFAULT_HAPROXY_CPU=2
DEFAULT_HAPROXY_MEMORY=4G
# Function to display help
display_help() {
    echo "Usage: $0 [options]"
    echo
    echo "Options:"
    echo "  --base-name          Base name for the cluster"
    echo "  --cluster-version    Kubernetes cluster version (e.g., v1)"
    echo "  --num-masters        Number of master nodes"
    echo "  --num-workers        Number of worker nodes"
    echo "  --master-mem         Memory for master nodes (default: $DEFAULT_MASTER_MEM)"
    echo "  --master-cpus        CPUs for master nodes (default: $DEFAULT_MASTER_CPUS)"
    echo "  --master-disk        Disk size for master nodes (default: $DEFAULT_MASTER_DISK)"
    echo "  --worker-mem         Memory for worker nodes (default: $DEFAULT_WORKER_MEM)"
    echo "  --worker-cpus        CPUs for worker nodes (default: $DEFAULT_WORKER_CPUS)"
    echo "  --worker-disk        Disk size for worker nodes (default: $DEFAULT_WORKER_DISK)"
    echo "  --haproxy-disk       Disk size for proxy server node (default: $DEFAULT_HAPROXY_DISK)"
    echo "  --haproxy-cpu        CPUs for proxy server node (default: $DEFAULT_HAPROXY_CPU)"
    echo "  --haproxy-memory     Memory for proxy server node (default: $DEFAULT_HAPROXY_MEMORY)"
    echo "  --host               Hostname for the Kubernetes proxy (default: <cluster version>.k8s.local)"
    echo "  --help               Display this help message"
    exit 0
}

# Function to copy and run the kube-config.sh script on an instance
copy_and_run_kub_config() {
    local node=$1
    multipass transfer kube-config.sh "$node":/home/ubuntu/kube-config.sh
    multipass exec "$node" -- bash -c "chmod +x /home/ubuntu/kube-config.sh && sudo /home/ubuntu/kube-config.sh"
}

# Function to get the IP address of an instance
get_ip_address() {
    local instance_name=$1
    local ip_address=$(multipass info "$instance_name" | grep "IPv4" | awk '{print $2}')
    if [ -z "$ip_address" ]; then
        echo "No IP address found for instance: $instance_name"
        exit 1
    fi
    echo "$ip_address"
}

# Function to generate proxy server master server configuration
config_master_ip_address() {
    local ip_address=$1
    local master_name=$2
    echo "    server $master_name ${ip_address}:6443 check fall 3 rise 2"
}

# Function to generate proxy server master server configuration
config_internal_proxy_master_ip_address() {
    local ip_address=$1
    local master_name=$2
    local ingress_nginx_svc_port=$3
    echo "    server $master_name ${ip_address}:${ingress_nginx_svc_port} check fall 3 rise 2"
}

# Function to read and validate user input
read_and_validate() {
    local prompt=$1
    local var_name=$2
    local validation_regex=$3
    local example_message=$4

    while true; do
        read -p "$prompt" input
        if [ -z "$input" ]; then
            echo -e "\n\tInput is required. $example_message\n"
        elif ! echo "$input" | grep -qE "$validation_regex"; then
            echo "Invalid input. $example_message"
        else
            eval $var_name="'$input'"
            break
        fi
    done
}

# Function to validate minimum CPU and memory requirements
validate_min_requirements() {
  # Extract numeric part from the value (removing any unit suffix like 'G')
  local value=$(echo "$1" | sed 's/[^0-9]*//g')
  local min_value=$(echo "$2" | sed 's/[^0-9]*//g')

  if [ "$value" -lt "$min_value" ]; then
     echo "Error: Minimum value for CPUs and memory is $min_value"
     exit 1
  fi
}


# Parse command-line arguments
while [ $# -gt 0 ]; do
    case "$1" in
        --base-name)
            BASE_NAME="$2"
            shift 2
            ;;
        --cluster-version)
            CLUSTER_VERSION="$2"
            shift 2
            ;;
        --num-masters)
            NUM_MASTERS="$2"
            shift 2
            ;;
        --num-workers)
            NUM_WORKERS="$2"
            shift 2
            ;;
        --master-mem)
            MASTER_MEM="$2"
            shift 2
            ;;
        --master-cpus)
            MASTER_CPUS="$2"
            shift 2
            ;;
        --master-disk)
            MASTER_DISK="$2"
            shift 2
            ;;
        --worker-mem)
            WORKER_MEM="$2"
            shift 2
            ;;
        --worker-cpus)
            WORKER_CPUS="$2"
            shift 2
            ;;
        --worker-disk)
            WORKER_DISK="$2"
            shift 2
            ;;
        --haproxy-disk)
            HAPROXY_DISK="$2"
            shift 2
            ;;
        --haproxy-cpu)
            HAPROXY_CPU="$2"
            shift 2
            ;;
        --haproxy-memory)
            HAPROXY_MEMORY="$2"
            shift 2
            ;;
        --host)
            HAPROXY_MEMORY="$2"
            shift 2
            ;;
        --help)
            display_help
            ;;
        *)
            echo "Unknown option: $1"
            display_help
            ;;
    esac
done

# Validate required inputs
[ -z "$BASE_NAME" ] && read_and_validate "Enter base name for the cluster: " BASE_NAME "^[a-zA-Z0-9_-]+$" "Example: k8s-cluster"
[ -z "$CLUSTER_VERSION" ] && read_and_validate "Enter Kubernetes cluster version: " CLUSTER_VERSION "^[vV]?[0-9]+(\.[0-9]+)*$" "Example: v1.27"
[ -z "$NUM_MASTERS" ] && read_and_validate "Enter number of master nodes: " NUM_MASTERS "^[0-9]+$" "Example: 3"
[ -z "$NUM_WORKERS" ] && read_and_validate "Enter number of worker nodes: " NUM_WORKERS "^[0-9]+$" "Example: 3"
log "Creating Kubernetes cluster with $NUM_MASTERS master nodes and $NUM_WORKERS worker nodes"

# Use default values if not provided
MASTER_MEM=${MASTER_MEM:-$DEFAULT_MASTER_MEM}
MASTER_CPUS=${MASTER_CPUS:-$DEFAULT_MASTER_CPUS}
MASTER_DISK=${MASTER_DISK:-$DEFAULT_MASTER_DISK}
WORKER_MEM=${WORKER_MEM:-$DEFAULT_WORKER_MEM}
WORKER_CPUS=${WORKER_CPUS:-$DEFAULT_WORKER_CPUS}
WORKER_DISK=${WORKER_DISK:-$DEFAULT_WORKER_DISK}
HAPROXY_DISK=${HAPROXY_DISK:-$DEFAULT_HAPROXY_DISK}
HAPROXY_CPU=${HAPROXY_CPU:-$DEFAULT_HAPROXY_CPU}
HAPROXY_MEMORY=${HAPROXY_MEMORY:-$DEFAULT_HAPROXY_MEMORY}
DEFAULT_K8S_PROXY_SERVER_HOSTNAME="${CLUSTER_VERSION}.k8s.local"
K8S_PROXY_SERVER_HOSTNAME=${K8S_PROXY_SERVER_HOSTNAME:-$DEFAULT_K8S_PROXY_SERVER_HOSTNAME}
K8S_PROXY_SERVER_NODE_NAME="k8s-proxy-server-${CLUSTER_VERSION}"

join_worker_nodes() {
  local JOIN_COMMAND=""
  JOIN_COMMAND=$(multipass exec "${BASE_NAME}-master-1-${CLUSTER_VERSION}" -- sudo kubeadm token create --print-join-command)

  for node in "${WORKER_NODES[@]}"; do
      log "Joining worker $node to the cluster with code $JOIN_COMMAND"
      multipass exec "$node" -- sudo bash -c "$JOIN_COMMAND"
  done
}

master_nodes_join() {
  multipass transfer "./scripts/join-command-generator" "${BASE_NAME}-master-1-${CLUSTER_VERSION}:/tmp/join-command-generator"

  CONTROL_PLANE_JOIN_COMMAND=$(multipass exec "${BASE_NAME}-master-1-${CLUSTER_VERSION}" -- sudo bash -c " /tmp/join-command-generator ")

  echo "Generated join command: $CONTROL_PLANE_JOIN_COMMAND"
  if [[ -z "$CONTROL_PLANE_JOIN_COMMAND" ]]; then
      log "ERROR: CONTROL_PLANE_JOIN_COMMAND is empty or invalid. Skipping joining additional master nodes."
  else
      log "CONTROL_PLANE_JOIN_COMMAND is valid: $CONTROL_PLANE_JOIN_COMMAND"

      # Join additional master nodes (skip the first master node)
      for ((i = 2; i <= NUM_MASTERS; i++)); do
          MASTER_NODE="${BASE_NAME}-master-${i}-${CLUSTER_VERSION}"
          log "Joining master node $MASTER_NODE to the cluster..."

          # Run the join command on the additional master node
          multipass exec "$MASTER_NODE" -- sudo bash -c "$CONTROL_PLANE_JOIN_COMMAND"

          # Verify the node joined successfully
          if multipass exec "$MASTER_NODE" -- sudo kubectl get nodes | grep "$MASTER_NODE"; then
              log "Master node $MASTER_NODE successfully joined the cluster."
          else
              log "ERROR: Master node $MASTER_NODE failed to join the cluster."
          fi
      done
  fi
}

master_node_config() {
  echo "#!/bin/bash

set -e
sudo kubeadm init --control-plane-endpoint $K8S_PROXY_SERVER_HOSTNAME:6443 --upload-certs

sudo mkdir -p \$HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf \$HOME/.kube/config
sudo chown \$(id -u):\$(id -g) \$HOME/.kube/config
  " > "${TEMP_DIR}"/master-setup

  # Transfer the master-setup script to the first master node
  multipass transfer "${TEMP_DIR}/master-setup" "${BASE_NAME}-master-1-${CLUSTER_VERSION}:/tmp/master-setup"

  # Make the script executable
  multipass exec "${BASE_NAME}-master-1-${CLUSTER_VERSION}" -- sudo chmod +x /tmp/master-setup
  # Run the script with sudo
  multipass exec "${BASE_NAME}-master-1-${CLUSTER_VERSION}" -- sudo /tmp/master-setup
  multipass exec "${BASE_NAME}-master-1-${CLUSTER_VERSION}" -- sudo cat /root/.kube/config > "${TEMP_DIR}/config"

  join_worker_nodes

  ARCH=$(multipass exec "${BASE_NAME}-master-1-${CLUSTER_VERSION}" -- uname -m)

  if [[ "$ARCH" == "arm"* || "$ARCH" == "aarch64" ]]; then
    log "ARM architecture detected. Applying Calico..."
    multipass exec "${BASE_NAME}-master-1-${CLUSTER_VERSION}" -- sudo bash -c "kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml"
  else
    log "Non-ARM architecture detected. Applying Weave..."
    multipass exec "${BASE_NAME}-master-1-${CLUSTER_VERSION}" -- sudo bash -c "kubectl apply -f https://github.com/weaveworks/weave/releases/download/v2.8.1/weave-daemonset-k8s.yaml"
  fi

  multipass exec "${BASE_NAME}-master-1-${CLUSTER_VERSION}" -- sudo bash -c "kubectl create namespace development"
  multipass exec "${BASE_NAME}-master-1-${CLUSTER_VERSION}" -- sudo bash -c "kubectl config set-context --current --namespace=development"
  multipass exec "${BASE_NAME}-master-1-${CLUSTER_VERSION}" -- sudo bash -c "kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/cloud/deploy.yaml"
  # Install metrics server
  multipass exec "${BASE_NAME}-master-1-${CLUSTER_VERSION}" -- sudo bash -c " kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml"

 master_nodes_join || true
}

utils_generate() {
  echo "#!/bin/bash

set -e

mkdir -p \"\${HOME}\"/.kube
mv \"\${HOME}\"/.kube/config \"\${HOME}\"/.kube/config-\$(date +'%Y-%m-%d-%H-%M-%S') || true
cp ${TEMP_DIR}/config \$HOME/.kube/config
chmod 644 \"\${HOME}\"/.kube/config

" > "${TEMP_DIR}"/kube-config

  chmod +x "${TEMP_DIR}"/kube-config

  log "Change kubectl context to the new cluster by running the following command:
    ${TEMP_DIR}/kube-config
  "

  cp ./scripts/template/hosts-config "${TEMP_DIR}"/hosts-config

  echo "update_or_add_host "${HAPROXY_IP}" "${K8S_PROXY_SERVER_HOSTNAME}"
sudo cat /etc/hosts
" >> "${TEMP_DIR}"/hosts-config

  chmod +x "${TEMP_DIR}"/hosts-config

  log "To update the /etc/hosts file on your local machine, run the following command:
    ${TEMP_DIR}/hosts-config
  "
}

update_haproxy_config() {
  multipass transfer "${HAPROXY_CFG_PATH}" "${K8S_PROXY_SERVER_NODE_NAME}:/tmp/haproxy.cfg"

  multipass exec "$K8S_PROXY_SERVER_NODE_NAME" -- bash -c "
      sudo mv /tmp/haproxy.cfg /etc/haproxy/haproxy.cfg
      sudo chown root:root /etc/haproxy/haproxy.cfg
      sudo chmod 644 /etc/haproxy/haproxy.cfg
      sudo systemctl restart haproxy
  "
}

config_haproxy_internal_proxy() {
  local INGRESS_NGINX_SVC_PORT

  INGRESS_NGINX_SVC_PORT=$(
  multipass exec "${BASE_NAME}-master-1-${CLUSTER_VERSION}" -- sudo bash -c "
    # Get the ingress-nginx-controller service details in the ingress-nginx namespace
    SERVICE_DETAILS=\$(kubectl get svc ingress-nginx-controller -n ingress-nginx -o=json)

    # Extract the nodePort for the HTTP port (port 80)
    echo \$SERVICE_DETAILS | jq -r '.spec.ports[] | select(.port == 80) | .nodePort'
    "
  )

  echo "
# K8s internal proxy
frontend internal_proxy
    mode http
    bind *:80
    option httplog
    redirect scheme http code 301 if { hdr(Host) -i $HAPROXY_IP }
    default_backend ${BASE_NAME}-internal-proxy-${CLUSTER_VERSION}

backend ${BASE_NAME}-internal-proxy-${CLUSTER_VERSION}
    mode http
    balance roundrobin
    option tcp-check" >> "${HAPROXY_CFG_PATH}"

  # Add master nodes to proxy server internal proxy configuration
  log "Setting up masters in proxy server internal proxy configuration"
  for i in "${!MASTER_NODES[@]}"; do
      MASTER_IP=$(get_ip_address "${MASTER_NODES[$i]}")
      log "Adding master ${MASTER_NODES[$i]}::$MASTER_IP to proxy server internal proxy configuration"
      config_internal_proxy_master_ip_address "$MASTER_IP" "${MASTER_NODES[$i]}" "${INGRESS_NGINX_SVC_PORT}" | tee -a "${HAPROXY_CFG_PATH}"
  done

  # Add master nodes to proxy server internal proxy configuration
  log "Setting up workers in proxy server internal proxy configuration"
  for i in "${!WORKER_NODES[@]}"; do
      WORKER_IP=$(get_ip_address "${WORKER_NODES[$i]}")
      log "Adding worker ${WORKER_NODES[$i]}::$MASTER_IP to proxy server internal configuration"
      config_internal_proxy_master_ip_address "$WORKER_IP" "${WORKER_NODES[$i]}"  "${INGRESS_NGINX_SVC_PORT}" | tee -a "${HAPROXY_CFG_PATH}"
  done
}


# Validate minimum CPUs and memory for master and worker nodes
validate_min_requirements "$MASTER_CPUS" 2
validate_min_requirements "$MASTER_MEM" 2
validate_min_requirements "$WORKER_CPUS" 2
validate_min_requirements "$WORKER_MEM" 2

# Arrays to hold master and worker node names
MASTER_NODES=()
WORKER_NODES=()
