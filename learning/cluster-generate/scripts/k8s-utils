#!/bin/bash

set -e

source ./scripts/log-utils

# Default values
DEFAULT_MASTER_MEM=2G
DEFAULT_MASTER_CPUS=2
DEFAULT_MASTER_DISK=22G
DEFAULT_WORKER_MEM=4G
DEFAULT_WORKER_CPUS=2
DEFAULT_WORKER_DISK=32G

# Function to display help
display_help() {
    echo "Usage: $0 [options]"
    echo
    echo "Options:"
    echo "  --base-name          Base name for the cluster"
    echo "  --cluster-version    Kubernetes cluster version (e.g., v1.27)"
    echo "  --num-masters        Number of master nodes"
    echo "  --num-workers        Number of worker nodes"
    echo "  --master-mem         Memory for master nodes (default: $DEFAULT_MASTER_MEM)"
    echo "  --master-cpus        CPUs for master nodes (default: $DEFAULT_MASTER_CPUS)"
    echo "  --master-disk        Disk size for master nodes (default: $DEFAULT_MASTER_DISK)"
    echo "  --worker-mem         Memory for worker nodes (default: $DEFAULT_WORKER_MEM)"
    echo "  --worker-cpus        CPUs for worker nodes (default: $DEFAULT_WORKER_CPUS)"
    echo "  --worker-disk        Disk size for worker nodes (default: $DEFAULT_WORKER_DISK)"
    echo "  --help               Display this help message"
    exit 0
}

# Function to copy and run the kube-config.sh script on an instance
copy_and_run_kub_config() {
    local node=$1
    multipass transfer kube-config.sh "$node":/home/ubuntu/kube-config.sh
    multipass exec "$node" -- bash -c "chmod +x /home/ubuntu/kube-config.sh && sudo /home/ubuntu/kube-config.sh"
}

# Function to get the IP address of an instance
get_ip_address() {
    local instance_name=$1
    local ip_address=$(multipass info "$instance_name" | grep "IPv4" | awk '{print $2}')
    if [ -z "$ip_address" ]; then
        echo "No IP address found for instance: $instance_name"
        exit 1
    fi
    echo "$ip_address"
}

# Function to generate HAProxy master server configuration
config_master_ip_address() {
    local ip_address=$1
    local master_name=$2
    echo "    server $master_name ${ip_address}:6443 check fall 3 rise 2"
}

# Function to generate HAProxy master server configuration
config_internal_proxy_master_ip_address() {
    local ip_address=$1
    local master_name=$2
    echo "    server $master_name ${ip_address}:30080 check fall 3 rise 2"
}

# Function to read and validate user input
read_and_validate() {
    local prompt=$1
    local var_name=$2
    local validation_regex=$3
    local example_message=$4

    while true; do
        read -p "$prompt" input
        if [ -z "$input" ]; then
            echo -e "\n\tInput is required. $example_message\n"
        elif ! echo "$input" | grep -qE "$validation_regex"; then
            echo "Invalid input. $example_message"
        else
            eval $var_name="'$input'"
            break
        fi
    done
}

# Function to validate minimum CPU and memory requirements
validate_min_requirements() {
  # Extract numeric part from the value (removing any unit suffix like 'G')
  local value=$(echo "$1" | sed 's/[^0-9]*//g')
  local min_value=$(echo "$2" | sed 's/[^0-9]*//g')

  if [ "$value" -lt "$min_value" ]; then
     echo "Error: Minimum value for CPUs and memory is $min_value"
     exit 1
  fi
}


# Parse command-line arguments
while [ $# -gt 0 ]; do
    case "$1" in
        --base-name)
            BASE_NAME="$2"
            shift 2
            ;;
        --cluster-version)
            CLUSTER_VERSION="$2"
            shift 2
            ;;
        --num-masters)
            NUM_MASTERS="$2"
            shift 2
            ;;
        --num-workers)
            NUM_WORKERS="$2"
            shift 2
            ;;
        --master-mem)
            MASTER_MEM="$2"
            shift 2
            ;;
        --master-cpus)
            MASTER_CPUS="$2"
            shift 2
            ;;
        --master-disk)
            MASTER_DISK="$2"
            shift 2
            ;;
        --worker-mem)
            WORKER_MEM="$2"
            shift 2
            ;;
        --worker-cpus)
            WORKER_CPUS="$2"
            shift 2
            ;;
        --worker-disk)
            WORKER_DISK="$2"
            shift 2
            ;;
        --help)
            display_help
            ;;
        *)
            echo "Unknown option: $1"
            display_help
            ;;
    esac
done

config_request() {
#  # Validate required inputs
#  [ -z "$BASE_NAME" ] && read_and_validate "Enter base name for the cluster: " BASE_NAME "^[a-zA-Z0-9_-]+$" "Example: k8s-cluster"
#  [ -z "$CLUSTER_VERSION" ] && read_and_validate "Enter Kubernetes cluster version: " CLUSTER_VERSION "^[vV]?[0-9]+(\.[0-9]+)*$" "Example: v1.27"
#  [ -z "$NUM_MASTERS" ] && read_and_validate "Enter number of master nodes: " NUM_MASTERS "^[0-9]+$" "Example: 3"
#  [ -z "$NUM_WORKERS" ] && read_and_validate "Enter number of worker nodes: " NUM_WORKERS "^[0-9]+$" "Example: 3"
  log "Creating Kubernetes cluster with $NUM_MASTERS master nodes and $NUM_WORKERS worker nodes"
}

# Validate required inputs
[ -z "$BASE_NAME" ] && read_and_validate "Enter base name for the cluster: " BASE_NAME "^[a-zA-Z0-9_-]+$" "Example: k8s-cluster"
[ -z "$CLUSTER_VERSION" ] && read_and_validate "Enter Kubernetes cluster version: " CLUSTER_VERSION "^[vV]?[0-9]+(\.[0-9]+)*$" "Example: v1.27"
[ -z "$NUM_MASTERS" ] && read_and_validate "Enter number of master nodes: " NUM_MASTERS "^[0-9]+$" "Example: 3"
[ -z "$NUM_WORKERS" ] && read_and_validate "Enter number of worker nodes: " NUM_WORKERS "^[0-9]+$" "Example: 3"

# Use default values if not provided
MASTER_MEM=${MASTER_MEM:-$DEFAULT_MASTER_MEM}
MASTER_CPUS=${MASTER_CPUS:-$DEFAULT_MASTER_CPUS}
MASTER_DISK=${MASTER_DISK:-$DEFAULT_MASTER_DISK}
WORKER_MEM=${WORKER_MEM:-$DEFAULT_WORKER_MEM}
WORKER_CPUS=${WORKER_CPUS:-$DEFAULT_WORKER_CPUS}
WORKER_DISK=${WORKER_DISK:-$DEFAULT_WORKER_DISK}

# Validate minimum CPUs and memory for master and worker nodes
validate_min_requirements "$MASTER_CPUS" 2
validate_min_requirements "$MASTER_MEM" 2
validate_min_requirements "$WORKER_CPUS" 2
validate_min_requirements "$WORKER_MEM" 2

# Arrays to hold master and worker node names
MASTER_NODES=()
WORKER_NODES=()
