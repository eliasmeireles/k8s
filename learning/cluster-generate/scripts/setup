#!/bin/bash

set -e

source ./scripts/k8s-utils

setup_logs "cluster-generate"

# Create master nodes
for i in $(seq 1 "$NUM_MASTERS"); do
    MASTER_NAME="${BASE_NAME}-master-${i}-${CLUSTER_VERSION}"
    log "Checking master node: $MASTER_NAME"

    # Check if the node already exists
    if multipass list | grep -q "$MASTER_NAME"; then
        log "Master node $MASTER_NAME already exists. Skipping creation."
    else
        log "Creating master node: $MASTER_NAME"
        multipass launch --name "$MASTER_NAME" --memory "$MASTER_MEM" --cpus "$MASTER_CPUS" --disk "$MASTER_DISK" --cloud-init ./template/k8s-base.yaml
    fi

    # shellcheck disable=SC2206
    MASTER_NODES+=($MASTER_NAME)
done

# Create worker nodes
for i in $(seq 1 "$NUM_WORKERS"); do
    WORKER_NAME="${BASE_NAME}-worker-${i}-${CLUSTER_VERSION}"
    log "Checking worker node: $WORKER_NAME"

    # Check if the node already exists
    if multipass list | grep -q "$WORKER_NAME"; then
        log "Worker node $WORKER_NAME already exists. Skipping creation."
    else
        log "Creating worker node: $WORKER_NAME"
        multipass launch --name "$WORKER_NAME" --memory "$WORKER_MEM" --cpus "$WORKER_CPUS" --disk "$WORKER_DISK" --cloud-init ./template/k8s-base.yaml
    fi

    # shellcheck disable=SC2206
    WORKER_NODES+=($WORKER_NAME)
done

# Create HAProxy node
HAPROXY_NAME="${BASE_NAME}-haproxy-${CLUSTER_VERSION}"
log "Checking HAProxy node: $HAPROXY_NAME"

# Check if the HAProxy node already exists
if multipass list | grep -q "$HAPROXY_NAME"; then
    log "HAProxy node $HAPROXY_NAME already exists. Skipping creation."
else
    log "Creating HAProxy node: $HAPROXY_NAME"
    multipass launch --name "$HAPROXY_NAME" --memory 1G --cpus 1 --disk 5G
    ## Install HAProxy
    multipass exec "$HAPROXY_NAME" -- bash -c "
        sudo apt-get update && sudo apt-get install -y haproxy
    "

    log "$HAPROXY_NAME:: Generating HAProxy configuration"
    # Generate HAProxy configuration
    multipass exec "$HAPROXY_NAME" -- sudo cp /etc/haproxy/haproxy.cfg /etc/haproxy/haproxy-bk.cfg
fi

HAPROXY_CFG_DIR_PATH="./.temp/$(date +'%Y_%m_%d_%H_%M_%S')/"

mkdir -p "$HAPROXY_CFG_DIR_PATH"

HAPROXY_CFG_PATH="${HAPROXY_CFG_DIR_PATH}haproxy.cfg"

log "Loading HAProxy configuration from $HAPROXY_NAME to $HAPROXY_CFG_PATH"
multipass transfer "${HAPROXY_NAME}:/etc/haproxy/haproxy-bk.cfg" "${HAPROXY_CFG_PATH}"

# Get HAProxy IP address
log "HAProxy installed on $HAPROXY_NAME"
HAPROXY_IP=$(get_ip_address "$HAPROXY_NAME")

echo "
# K8s proxy
frontend kubernetes
    mode tcp
    bind $HAPROXY_IP:6443
    option tcplog
    default_backend ${BASE_NAME}-masters-${CLUSTER_VERSION}

backend ${BASE_NAME}-masters-${CLUSTER_VERSION}
    mode tcp
    balance roundrobin
    option tcp-check" >> "${HAPROXY_CFG_PATH}"

log "$HAPROXY_NAME:: Updating HAProxy configuration"

# Add master nodes to HAProxy configuration
log "Setting up masters in HAProxy configuration"

for i in "${!MASTER_NODES[@]}"; do
    MASTER_IP=$(get_ip_address "${MASTER_NODES[$i]}")
    log "Adding master ${MASTER_NODES[$i]}/$MASTER_IP to HAProxy configuration"
    config_master_ip_address "$MASTER_IP" "${MASTER_NODES[$i]}" | tee -a "${HAPROXY_CFG_PATH}"
done

echo "
# K8s internal proxy
frontend internal_proxy
    mode http
    bind $HAPROXY_IP:80
    option httplog
    redirect scheme http code 301 if { hdr(Host) -i $HAPROXY_IP }
    default_backend ${BASE_NAME}-internal-proxy-${CLUSTER_VERSION}

backend ${BASE_NAME}-internal-proxy-${CLUSTER_VERSION}
    mode http
    balance roundrobin
    option tcp-check" >> "${HAPROXY_CFG_PATH}"

# Add master nodes to HAProxy internal proxy configuration
log "Setting up masters in HAProxy internal proxy configuration"
for i in "${!MASTER_NODES[@]}"; do
    MASTER_IP=$(get_ip_address "${MASTER_NODES[$i]}")
    log "Adding master ${MASTER_NODES[$i]}/$MASTER_IP to HAProxy internal proxy configuration"
    config_internal_proxy_master_ip_address "$MASTER_IP" "${MASTER_NODES[$i]}" | tee -a "${HAPROXY_CFG_PATH}"
done

# Update /etc/hosts for all nodes
log "Setting up workers in HAProxy configuration"
for node in "${MASTER_NODES[@]}" "${WORKER_NODES[@]}"; do
    log "Updating /etc/hosts on $node"
    multipass exec "$node" -- bash -c "echo '${HAPROXY_IP} ${HAPROXY_NAME}' | sudo tee -a /etc/hosts"
done

multipass transfer "${HAPROXY_CFG_PATH}" "${HAPROXY_NAME}:/tmp/haproxy.cfg"

multipass exec "$HAPROXY_NAME" -- bash -c "
    sudo mv /tmp/haproxy.cfg /etc/haproxy/haproxy.cfg
    sudo chown root:root /etc/haproxy/haproxy.cfg
    sudo chmod 644 /etc/haproxy/haproxy.cfg
    sudo systemctl restart haproxy
"

for i in $(seq 1 "$NUM_MASTERS"); do
    MASTER_NAME="${BASE_NAME}-master-${i}-${CLUSTER_VERSION}"
    log "Pulling container images for master node: $MASTER_NAME"
    multipass exec "$MASTER_NAME" -- sudo kubeadm config images pull
done

echo "#!/bin/bash

set -e

# Pull container images for each master node
sudo kubeadm init --control-plane-endpoint $HAPROXY_NAME:6443 --upload-certs

sudo mkdir -p \$HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf \$HOME/.kube/config
sudo chown \$(id -u):\$(id -g) \$HOME/.kube/config

echo \"\"
echo \"\"
kubectl apply -f https://github.com/weaveworks/weave/releases/download/v2.8.1/weave-daemonset-k8s.yaml
" > ./.temp/master-setup

# Transfer the master-setup script to the first master node
multipass transfer "./.temp/master-setup" "${BASE_NAME}-master-1-${CLUSTER_VERSION}:/tmp/master-setup"

# Make the script executable
multipass exec "${BASE_NAME}-master-1-${CLUSTER_VERSION}" -- sudo chmod +x /tmp/master-setup
# Run the script with sudo
multipass exec "${BASE_NAME}-master-1-${CLUSTER_VERSION}" -- sudo /tmp/master-setup
multipass exec "${BASE_NAME}-master-1-${CLUSTER_VERSION}" -- sudo cat /root/.kube/config > ./.temp/"$(date +'%Y-%m-%d %H:%M:%S')-${BASE_NAME}-master-1-${CLUSTER_VERSION}"-kube-config.yaml

#multipass exec "${BASE_NAME}-master-1-${CLUSTER_VERSION}" -- sudo kubeadm token create --print-join-command --control-plane > /tmp/control-plane-join.sh
#multipass exec "${BASE_NAME}-master-1-${CLUSTER_VERSION}" -- sudo kubeadm token create --print-join-command > /tmp/worker-join.sh

# Logg masters and haproxy nodes ip addresses
log "Masters:"
for i in "${!MASTER_NODES[@]}"; do
    MASTER_IP=$(get_ip_address "${MASTER_NODES[$i]}")
    log "${MASTER_NODES[$i]}: $MASTER_IP"
done

log "HAProxy: $HAPROXY_NAME: $HAPROXY_IP"

log "Cluster [${BASE_NAME}-${CLUSTER_VERSION}] setup is complete."

