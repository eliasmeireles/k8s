#!/bin/bash

set -e

source ./scripts/k8s-utils

setup_logs "cluster-generate"

# Arrays to store background process PIDs
MASTER_PIDS=()
WORKER_PIDS=()
HAPROXY_PID=()

# Function to launch master nodes in parallel
launch_masters() {
    for i in $(seq 1 "$NUM_MASTERS"); do
      MASTER_NAME="${BASE_NAME}-master-${i}-${CLUSTER_VERSION}"
      # shellcheck disable=SC2206
      MASTER_NODES+=($MASTER_NAME)
      (
        log "Checking master node: $MASTER_NAME"

        # Check if the node already exists
        if multipass list | grep -q "$MASTER_NAME"; then
            log "Master node $MASTER_NAME already exists. Skipping creation."
        else
            log "Creating master node: $MASTER_NAME"
            multipass launch --verbose --name "$MASTER_NAME" --memory "$MASTER_MEM" --cpus "$MASTER_CPUS" --disk "$MASTER_DISK" --cloud-init ./template/k8s-master-node.yaml
        fi
      ) &
      local PID
      PID=$!

      log "$MASTER_NAME launcher running in pid: $PID"
      MASTER_PIDS+=("$PID")
    done
}

# Function to launch worker nodes in parallel
launch_workers() {
    for i in $(seq 1 "$NUM_WORKERS"); do
        WORKER_NAME="${BASE_NAME}-worker-${i}-${CLUSTER_VERSION}"
        # shellcheck disable=SC2206
        WORKER_NODES+=($WORKER_NAME)
        log "Checking worker node: $WORKER_NAME"
        (
            # Check if the node already exists
            if multipass list | grep -q "$WORKER_NAME"; then
                log "Worker node $WORKER_NAME already exists. Skipping creation."
            else
                log "Creating worker node: $WORKER_NAME"
                multipass launch --verbose --name "$WORKER_NAME" --memory "$WORKER_MEM" --cpus "$WORKER_CPUS" --disk "$WORKER_DISK" --cloud-init ./template/k8s-worker-node.yaml
            fi
        ) &
        local PID
        PID=$!

        log "$WORKER_NAME launcher running in pid: $PID"
         WORKER_PIDS+=($PID)
    done
}

# Create HAProxy node
HAPROXY_NAME="${BASE_NAME}-haproxy-${CLUSTER_VERSION}"

launch_haproxy() {
  log "Checking HAProxy node: $HAPROXY_NAME"

  # Check if the HAProxy node already exists
  if multipass list | grep -qw "^$HAPROXY_NAME"; then
      log "HAProxy node $HAPROXY_NAME already exists. Skipping creation."
  else
      log "Creating HAProxy node: $HAPROXY_NAME"
      HAPROXY_LOG_FILE="${TEMP_DIR}/${HAPROXY_NAME}_launcher.log"
      multipass launch --name "$HAPROXY_NAME" --memory 1G --cpus 1 --disk 5G --cloud-init ./template/k8s-haproxy.yaml > "$HAPROXY_LOG_FILE" 2>&1 &
      local PID
      PID=$!
      log "$HAPROXY_NAME launcher running in pid: $PID"
      HAPROXY_PID+=("$PID")
  fi
}

# Wait for all master and worker node launches to complete
wait_for_node_launches() {
    # Wait for master nodes
    for pid in "${MASTER_PIDS[@]}"; do
        wait "$pid"
        log "Master node creation process completed for pid: $pid"
    done

    # Wait for worker nodes
    for pid in "${WORKER_PIDS[@]}"; do
        wait "$pid"
        log "Worker node creation process completed for pid: $pid"
    done

    # Wait for HAProxy node
    for pid in "${HAPROXY_PID[@]}"; do
        wait "$pid"
        log "HAProxy node creation process completed for pid: $pid"
    done
}

# Main execution
launch_masters
launch_workers
launch_haproxy
wait_for_node_launches

MASTER_PULLING_PIDS=()

for i in $(seq 1 "$NUM_MASTERS"); do
    MASTER_NAME="${BASE_NAME}-master-${i}-${CLUSTER_VERSION}"
    LOG_FILE="${TEMP_DIR}/${MASTER_NAME}_pull.log"
    log "Pulling container images for master node: $MASTER_NAME"
    # Run the command in the background and redirect output to a log file
    multipass exec "$MASTER_NAME" -- sudo kubeadm config images pull > "$LOG_FILE" 2>&1 &
    MASTER_PULL_PID=$!
    log "Pulling container images for master node $MASTER_NAME in pid: $MASTER_PULL_PID"
    MASTER_PULLING_PIDS+=("$MASTER_PULL_PID")
done

# Wait for all background processes to complete
log "Waiting for container images to be pulled for master nodes"

for pid in "${MASTER_PULLING_PIDS[@]}"; do
    wait "$pid"
    log "Container image pulling process completed for pid: $pid"
done

log "All container images have been pulled successfully. Check individual log files for details."

HAPROXY_CFG_PATH="${TEMP_DIR}/haproxy.cfg"

log "Loading HAProxy configuration from $HAPROXY_NAME to $HAPROXY_CFG_PATH"
multipass transfer "${HAPROXY_NAME}:/etc/haproxy/haproxy-bk.cfg" "${HAPROXY_CFG_PATH}"

# Get HAProxy IP address
log "HAProxy installed on $HAPROXY_NAME"
HAPROXY_IP=$(get_ip_address "$HAPROXY_NAME")

echo "
# K8s proxy
frontend kubernetes
    mode tcp
    bind $HAPROXY_IP:6443
    option tcplog
    default_backend ${BASE_NAME}-masters-${CLUSTER_VERSION}

backend ${BASE_NAME}-masters-${CLUSTER_VERSION}
    mode tcp
    balance roundrobin
    option tcp-check" >> "${HAPROXY_CFG_PATH}"

log "$HAPROXY_NAME:: Updating HAProxy configuration"

# Add master nodes to HAProxy configuration
log "Setting up masters in HAProxy configuration"

for i in "${!MASTER_NODES[@]}"; do
    MASTER_IP=$(get_ip_address "${MASTER_NODES[$i]}")
    log "Adding master ${MASTER_NODES[$i]}/$MASTER_IP to HAProxy configuration"
    config_master_ip_address "$MASTER_IP" "${MASTER_NODES[$i]}" | tee -a "${HAPROXY_CFG_PATH}"
done

config_haproxy_internal_proxy

# Update /etc/hosts for all nodes
log "Setting up workers in HAProxy configuration"
for node in "${MASTER_NODES[@]}" "${WORKER_NODES[@]}"; do
    log "Updating /etc/hosts on $node"
    multipass exec "$node" -- bash -c "echo '${HAPROXY_IP} ${HAPROXY_NAME}' | sudo tee -a /etc/hosts"
done

multipass transfer "${HAPROXY_CFG_PATH}" "${HAPROXY_NAME}:/tmp/haproxy.cfg"

multipass exec "$HAPROXY_NAME" -- bash -c "
    sudo mv /tmp/haproxy.cfg /etc/haproxy/haproxy.cfg
    sudo chown root:root /etc/haproxy/haproxy.cfg
    sudo chmod 644 /etc/haproxy/haproxy.cfg
    sudo systemctl restart haproxy
"

master_node_config

# Logg masters and haproxy nodes ip addresses
log "Masters:"
for i in "${!MASTER_NODES[@]}"; do
    MASTER_IP=$(get_ip_address "${MASTER_NODES[$i]}")
    log "${MASTER_NODES[$i]}: $MASTER_IP"
done

log "HAProxy: $HAPROXY_NAME: $HAPROXY_IP"

log "Cluster [${BASE_NAME}-${CLUSTER_VERSION}] setup is complete."

utils_generate





